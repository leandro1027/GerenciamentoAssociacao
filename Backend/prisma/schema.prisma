generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODELOS PRINCIPAIS ---

model Usuario {
  id                    Int                @id @default(autoincrement())
  nome                  String
  email                 String             @unique
  senha                 String
  role                  String             @default("USER")
  telefone              String?
  profileImageUrl       String?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  divulgacoes_aprovadas Int                @default(0)
  estado          String   @db.VarChar(2) @default("SC")
  cidade          String   @default("Não informado")

  // Relações
  voluntario            Voluntario?
  doacoes               Doacao[]
  adocoes               Adocao[]
  divulgacoes           Divulgacao[]

  // --- Funcionalidade de Gamificação ---
  pontos                Int                @default(0)
  conquistas            UsuarioConquista[]
}

model Animal {
  id               String       @id @default(uuid())
  nome             String
  animalImageUrl   String?
  descricao        String
  especie          Especie
  sexo             Sexo
  porte            Porte
  raca             String
  idade            String
  castrado         Boolean
  disponivel       Boolean      @default(true)
  status           StatusAnimal @default(DISPONIVEL)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  comunitario      Boolean      @default(false)
  localizacaoComunitaria String?


  // Relações
  pedidosAdocao    Adocao[]
}

model AnimalComunitario {
  id              String   @id @default(uuid())
  nomeTemporario  String    
  imageUrl        String
  latitude        Float   
  longitude       Float   
  enderecoCompleto String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Adocao {
  id                   String       @id @default(uuid())
  dataSolicitacao      DateTime     @default(now())
  dataFinalizacao      DateTime?
  status               StatusAdocao @default(SOLICITADA)
  observacoesAdmin     String?
  tipoMoradia          String?
  outrosAnimais        String?
  tempoDisponivel      String?
  motivoAdocao         String?
  recompensa_concedida Boolean      @default(false)
  recompensa_detalhes  String?

  // Relações
  usuarioId            Int
  usuario              Usuario      @relation(fields: [usuarioId], references: [id])
  animalId             String
  animal               Animal       @relation(fields: [animalId], references: [id])
  recompensas          Recompensa[]

  @@unique([usuarioId, animalId])
}

model Doacao {
  id        Int          @id @default(autoincrement())
  valor     Float
  tipo      String
  data      DateTime     @default(now())
  status    StatusDoacao @default(PENDENTE)

  // Relação opcional para permitir doações anónimas
  usuarioId Int?
  usuario   Usuario?     @relation(fields: [usuarioId], references: [id])
}

model Divulgacao {
  id          String           @id @default(uuid())
  localizacao String
  raca        String
  castrado    Boolean
  resgate     Boolean
  imageUrl    String
  descricao   String?
  status      DivulgacaoStatus @default(PENDENTE)
  createdAt   DateTime         @default(now())

  // Relações
  usuarioId   Int
  usuario     Usuario          @relation(fields: [usuarioId], references: [id])
}


// --- MODELOS DE APOIO E CONFIGURAÇÃO ---

model Voluntario {
  id        Int      @id @default(autoincrement())
  motivo    String
  status    String   @default("pendente")
  createdAt DateTime @default(now())

  // Relações
  usuarioId Int      @unique
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model Slide {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  title     String
  subtitle  String?
  createdAt DateTime @default(now())
}

model ConteudoHome {
  id        Int      @id @default(1)
  titulo    String
  subtitulo String
  itens     String
  imagemUrl String
  updatedAt DateTime @updatedAt
}

model Parceiro {
  id        Int      @id @default(autoincrement())
  nome      String
  logoUrl   String
  createdAt DateTime @default(now())
}

model Configuracao {
  id               Int     @id @default(1)
  gamificacaoAtiva Boolean @default(true)
}


// --- MODELOS DE GAMIFICAÇÃO E RECOMPENSAS ---

model Conquista {
  id          Int                @id @default(autoincrement())
  nome        String             @unique
  descricao   String
  icone       String
  pontosBonus Int                @default(0)

  // Relações
  usuarios    UsuarioConquista[]
}

model UsuarioConquista {
  dataDeGanho DateTime @default(now())

  // Relações
  usuarioId   Int
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  conquistaId Int
  conquista   Conquista @relation(fields: [conquistaId], references: [id])

  @@id([usuarioId, conquistaId])
}

model Recompensa {
  id            Int            @id @default(autoincrement())
  tipo          TipoRecompensa
  dataConcessao DateTime       @default(now())
  detalhes      String?

  // Relações
  adocaoId      String
  adocao        Adocao         @relation(fields: [adocaoId], references: [id])
}


// --- ENUMS ---

enum StatusDoacao {
  PENDENTE
  CONFIRMADA
  REJEITADA
}

enum Especie {
  CAO
  GATO
}

enum Sexo {
  MACHO
  FEMEA
}

enum Porte {
  PEQUENO
  MEDIO
  GRANDE
}

enum StatusAnimal {
  DISPONIVEL
  EM_PROCESSO_ADOCAO
  ADOTADO
}

enum StatusAdocao {
  SOLICITADA
  EM_ANALISE
  APROVADA
  RECUSADA
}

enum DivulgacaoStatus {
  PENDENTE
  REVISADO
  REJEITADO
}

enum TipoRecompensa {
  CASTRACAO
  VACINACAO
}

